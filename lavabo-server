#! /usr/bin/python2

#  Copyright 2016 Quentin Schulz <quentin.schulz@free-electrons.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import os
from ConfigParser import ConfigParser
import time
import argparse
import json
import subprocess
import sqlite3
import select
import sys
import fcntl
import utils
import xmlrpclib
import re

parser = argparse.ArgumentParser(description="Server to allow remote controlling of boards in LAVA.")
parser.add_argument("LAVABO_USER", help="user to authenticate against in lavabo")

parser.add_argument("-c", "--conf-file", type=argparse.FileType("r"), default=os.path.join(os.path.dirname(os.path.abspath(__file__)), "lavabo-server.conf"), help="the location of lavabo-server configuration file. Default: ./lavabo-server.conf.")

parser.add_argument('--tftp-dir', default="/var/lib/lava/dispatcher/tmp/", help="the TFTP root directory used to serve files to boards.")

subparsers = parser.add_subparsers(dest='cmd', help="subcommands help")
parser_sftp = subparsers.add_parser("internal-sftp", description="Launch sftp server.", help="launch sftp-server.")

parser_interact = subparsers.add_parser("interact", description="Listen to stdin and answer to stdout.", help="listen to stdin and answer to stdout.")

def list_devices(db_cursor):
    devices = proxy.scheduler.devices.list(False, True)
    return devices

def where(device_name):
    try:
        device_dict = str(proxy.scheduler.export_device_dictionary(device_name))
    except xmlrpclib.Fault as e:
        return utils.create_answer("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    reset_command_re = re.compile("hard_reset_command = '\/opt\/relay\.py (\w*) (\w*).*'")
    try:
        hostname = reset_command_re.search(device_dict).group(1)
        port = reset_command_re.search(device_dict).group(2)
    except:
        return utils.create_answer("error", "could not parse hard reset command to get device location")

    return utils.create_answer("success", {"hostname": hostname, "port": port})

def get_status(db_cursor, device_name):
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_answer("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    if device["status"] == "offline":
        db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
        #FIXME: Fetchone possibly returns None
        reservation = db_cursor.fetchone()
        last_use, made_by, reserved = reservation
        if reserved:
            device["offline_since"] = time.ctime(last_use)
            device["offline_by"] = made_by
        else:
            device["offline_by"] = "Unknown, outside lavabo"
            device["offline_since"] = None
    return utils.create_answer("success", device)

def get_serial(db_cursor, user, device_name):
    if not utils.acquire_lock(lock):
        return utils.create_answer("error", "Could not acquire lock.")
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_json("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    try:
        if device["status"] != "offline":
            return utils.create_answer("error", "Device is not offline in LAVA.")
        db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
        #FIXME: Fetchone possibly returns None
        reservation = db_cursor.fetchone()
        last_use, made_by, reserved = reservation
        if reserved == 0:
            return utils.create_answer("error", "You have to reserve the device.")
        if made_by != user:
            return utils.create_answer("error", "Device reserved by %s and lastly used %s." % (made_by, time.ctime(last_use)))
        serial_port = utils.get_serial_port(proxy, device_name)
        if serial_port is None:
            return utils.create_answer("error", "Could not parse connection command")
        return utils.create_answer("success", {"port": serial_port})
    finally:
        utils.release_lock(lock)

def power_reset(db_cursor, user, device_name):
    if not utils.acquire_lock(lock):
        return utils.create_answer("error", "Could not acquire lock.")
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_json("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    try:
        if device["status"] != "offline":
            return utils.create_answer("error", "Device is not offline in LAVA.")
        db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
        #FIXME: Fetchone possibly returns None
        reservation = db_cursor.fetchone()
        last_use, made_by, reserved = reservation
        if reserved == 0:
            return utils.create_answer("error", "You have to reserve the device.")
        if made_by != user:
            return utils.create_answer("error", "Device reserved by %s and lastly used %s." % (made_by, time.ctime(last_use)))
        ret = utils.power_reset(proxy, device_name)
        if ret == 0:
            return utils.create_answer("success", "Device successfully powered on.")
        return utils.create_answer("error", "Failed to power on device." + str(ret))
    finally:
        utils.release_lock(lock)

def power_off(db_cursor, user, device_name):
    if not utils.acquire_lock(lock):
        return utils.create_answer("error", "Could not acquire lock.")
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_json("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    try:
        if device["status"] != "offline":
            return utils.create_answer("error", "Device is not offline in LAVA.")
        db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
        #FIXME: Fetchone possibly returns None
        reservation = db_cursor.fetchone()
        last_use, made_by, reserved = reservation
        if reserved == 0:
            return utils.create_answer("error", "You have to reserve the device.")
        if made_by != user:
            return utils.create_answer("error", "Device reserved by %s and lastly used %s." % (made_by, time.ctime(last_use)))
        if utils.power_off(proxy, device_name) == 0:
            return utils.create_answer("success", "Device successfully powered off.")
        return utils.create_answer("error", "Failed to power off device.")
    finally:
        utils.release_lock(lock)

def put_offline(db_cursor, user, device_name, thief=False, cancel_job=False, force=False):
    if not utils.acquire_lock(lock):
        return utils.create_answer("error", "Could not acquire lock.")
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_json("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    try:
        if device["status"] == "idle":
            if utils.put_offline(proxy, device_name, user):
                return utils.create_answer("error", "Failed to put device offline.")
            db_cursor.execute("INSERT INTO reservations VALUES (?, ?, ?, ?)", (device_name, time.time(), user, 1))
            db_cursor.connection.commit()
            return utils.create_answer("success", "Device put offline.")
        if device["status"] == "offline":
            db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
            #FIXME: Fetchone possibly returns None
            reservation = db_cursor.fetchone()
            last_use, made_by, reserved = reservation
            if reserved == 1:
                if made_by != user:
                    return utils.create_answer("error", "Device reserved by %s and lastly used %s." % (made_by, time.ctime(last_use)))
                return utils.create_answer("success", "You have already put this device offline.")
            db_cursor.execute("INSERT INTO reservations VALUES (?, ?, ?, ?)", (device_name, time.time(), user, 1))
            db_cursor.connection.commit()
            return utils.create_answer("success", "Device put offline.")
        #FIXME: What about reserved, offlining, running?
        return utils.create_answer("error", "Device is probably running a job.")
    finally:
        utils.release_lock(lock)

def put_online(db_cursor, user, device_name, force=False):
    if not utils.acquire_lock(lock):
        return utils.create_answer("error", "Could not acquire lock.")
    try:
        device = proxy.scheduler.get_device_status(device_name)
    except xmlrpclib.Fault as e:
        return utils.create_json("error", "XMLRPC err%d: %s" % (e.faultCode, e.faultString))

    if device["status"] == "error":
        return json.dumps(device)
    try:
        if device["status"] == "idle":
            return utils.create_answer("success", "Device is already online.")
        if device["status"] == "offline":
            db_cursor.execute("SELECT last_use, made_by, reserved FROM reservations WHERE device_name = ? ORDER BY last_use DESC", (device_name,))
            #FIXME: Fetchone possibly returns None
            reservation = db_cursor.fetchone()
            last_use, made_by, reserved = reservation
            if made_by == user:
                if utils.put_online(proxy, device_name, user):
                    return utils.create_answer("error", "Failed to put device online.")
                db_cursor.execute("INSERT INTO reservations VALUES (?, ?, ?, ?)", (device_name, time.time(), user, 0))
                db_cursor.connection.commit()
                return utils.create_answer("success", "Device put online.")
            return utils.create_answer("error", "Device reserved by %s and lastly used %s." % (made_by, time.ctime(last_use)))
        #FIXME: What about reserved, offlining, running?
        return utils.create_answer("error", "Device is probably running a job.")
    finally:
        utils.release_lock(lock)

def add_user(db_cursor, username):
    try:
        db_cursor.execute("INSERT INTO users VALUES (?)", (username,))
    except sqlite3.IntegrityError:
        return utils.create_json("error", "Failed to create user, %s is already used." % username)
    try:
        os.mkdir(os.path.join(args.tftp_dir, username))
    except OSError:
        # Directory exists prior to user creation or UNIX user who
        # launched lavabo-server has unsufficient permission to create
        # a subdirectory in TFTP directory.
        # Test if the UNIX user who launched lavabo-server has
        # sufficient permission to write, read or execute in this directory.
        if not os.access(os.path.join(args.tftp_dir, username), os.R_OK | os.W_OK | os.X_OK):
            return utils.create_json("error", "Failed to create or access subdirectory for user in TFTP directory. Check UNIX permissions.")
    db_cursor.connection.commit()
    return utils.create_json("success", "User %s successfully created. Adding user's SSH key to lavabo-server is needed to complete user creation." % username)

def handle(data, stdout):
    try:
        data = json.loads(data)
    except ValueError as e:
        os.write(stdout, utils.create_answer("error", "Unable to parse request. Skipping.")+"\n")
        return
    user = args.LAVABO_USER
    db_cursor = db_conn.cursor()
    try:
        db_cursor.execute('SELECT * FROM users WHERE username = ?', (user,))
        db_user = db_cursor.fetchone()
        if not db_user:
            ans = add_user(db_cursor, user)
            if ans["status"] == "error":
                os.write(stdout, json.dumps(ans)+"\n")
                return
        ans = utils.create_answer("error", "Missing board name.")
        if "list" in data:
            ans = utils.create_answer("success", list_devices(db_cursor))
        elif "simple-list" in data:
            ans = utils.create_answer("success", utils.get_simple_device_list(proxy))
        elif "upload" in data:
            ans = utils.create_answer("success", str(os.path.join(args.tftp_dir, user)))
        #This is status from LAVA, offline_by will always be "daemon"
        #TODO: Add a status_remote to display the user who is working on the board
        elif "status" in data:
            if "board" in data["status"]:
                ans = get_status(db_cursor, data["status"]["board"])
        elif "where" in data:
            if "board" in data["where"]:
                ans = where(data["where"]["board"])
        elif "serial" in data:
            if "board" in data["serial"]:
                ans = get_serial(db_cursor, user, data["serial"]["board"])
        elif "release" in data:
            if "board" in data["release"]:
                ans = put_online(db_cursor, user, data["release"]["board"], data["release"].get("force", False))
        elif "reserve" in data:
            if "board" in data["reserve"]:
                ans = put_offline(db_cursor, user, data["reserve"]["board"], data["reserve"].get("thief", False), data["reserve"].get("cancel_job", False))
        elif "reset" in data:
            if "board" in data["reset"]:
                ans = power_reset(db_cursor, user, data["reset"]["board"])
        elif "power-off" in data:
            if "board" in data["power-off"]:
                ans = power_off(db_cursor, user, data["power-off"]["board"])
        else:
            ans = utils.create_answer("error", "Unknown command.")
        os.write(stdout, ans+"\n")
    finally:
        db_cursor.close()

# Taken from https://github.com/jborg/attic/blob/master/attic/remote.py
BUFSIZE = 10 * 1024 * 1024

def serve():
    stdin_fd = sys.stdin.fileno()
    stdout_fd = sys.stdout.fileno()
    # Make stdin non-blocking
    fl = fcntl.fcntl(stdin_fd, fcntl.F_GETFL)
    fcntl.fcntl(stdin_fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    # Make stdout blocking
    fl = fcntl.fcntl(stdout_fd, fcntl.F_GETFL)
    fcntl.fcntl(stdout_fd, fcntl.F_SETFL, fl & ~os.O_NONBLOCK)
    while True:
       r, w, es = select.select([stdin_fd], [], [], 10)
       if r:
           data = os.read(stdin_fd, BUFSIZE)
           if not data:
               return
           handle(data, stdout_fd)
    db_conn.close()

args = parser.parse_args()
config_parser = ConfigParser()
config_parser.readfp(args.conf_file)
lava_user = config_parser.get("lava-api", "user")
lava_token = config_parser.get("lava-api", "token")
lava_url = config_parser.get("lava-api", "url")

lock = open("lavabo-server.lock", "w+")

db_conn = utils.init_db()
url = utils.validate_input(lava_user, lava_token, lava_url)
proxy = utils.connect(url)

if args.cmd == "internal-sftp":
    subprocess.call(("/usr/lib/openssh/sftp-server -d %s" % os.path.join(args.tftp_dir, args.LAVABO_USER)).split())
else:
    serve()
