#! /usr/bin/python2
# PYTHON_ARGCOMPLETE_OK

#  Copyright 2016 Quentin Schulz <quentin.schulz@free-electrons.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

import socket
import argparse
import json
import os
import subprocess
import paramiko
import sys
import pexpect
import time
from ConfigParser import ConfigParser
import argcomplete
from tabulate import tabulate

def board_completer(prefix, parsed_args, **kwargs):
    config_parser = ConfigParser()
    config_parser.readfp(open(parsed_args.conf_file))
    hostname = config_parser.get("lavabo-server", "hostname")
    user = config_parser.get("lavabo-server", "user")
    port = config_parser.getint("lavabo-server", "port")
    answer = send_message("simple-list", user, hostname, port)
    try:
        answer = json.loads(answer)
    except ValueError as e:
        argcomplete.warn(e)
        sys.exit(1)
    if answer["status"] != "success":
        argcomplete.warn("error: %s" % answer["content"])
        sys.exit(1)
    return [board[0] for board in answer["content"] if board[0].startswith(prefix)]

parser = argparse.ArgumentParser(description="Client to connect to lavabo-server used to remote control boards in LAVA.")
parser.add_argument("-c", "--conf-file", type=argparse.FileType("r"), default=os.path.join(os.path.expanduser("~"), ".lavabo.conf"), help="the location of lavaboconfiguration file. Default: $HOME/.lavabo.conf.")

subparsers = parser.add_subparsers(dest='cmd', help="subcommands help")

parser_list = subparsers.add_parser("list", description="List all boards available in LAVA.", help="list available boards")

parser_power_off = subparsers.add_parser("power-off", description="Power board off.", help="power board off.")
parser_power_off.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to power off. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_power_reset = subparsers.add_parser("reset", description="Reset board's power.", help="reset board's power.")
parser_power_reset.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to reset. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_release = subparsers.add_parser("release", description="Release the board and put it online in LAVA if possible.", help="release the board and put it online in LAVA if possible.")
parser_release.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to put online. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_reserve = subparsers.add_parser("reserve", description="Reserve board and put it offline in LAVA if needed.", help="reserve board and put it offline in LAVA if needed.")
parser_reserve.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to put offline. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_serial = subparsers.add_parser("serial", description="Redirect port on lavabo-server to localhost to get serial connection.", help="redirect port on lavabo-server to localhost to get serial connection.")
parser_serial.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to get serial connection from. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_status = subparsers.add_parser("status", description="Get board status.", help="get board status.")
parser_status.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board whose status is requested. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

parser_upload = subparsers.add_parser("upload", description="Send files to lavabo-server.", help="send files to lavabo-server.")
parser_upload.add_argument("FILES", nargs="+", help="full path of the files to send. You can rename the files after being uploaded by separating local filenames and remote filenames with a colon (:). e.g.: upload file1:file2 file2:file3 will upload file1 and file2 and respectively rename them file2 and file3 on lavabo-server.")

parser_where = subparsers.add_parser("where", description="Locate board in lab.", help="locate board in lab.")
parser_where.add_argument("BOARD", nargs="?", default=os.environ.get("LAVABO_BOARD", None), help="hostname of the board to locate. If omitted, gotten from LAVABO_BOARD environment variable.").completer = board_completer

def send_message(cmd, user, hostname, port, board=None):
    ssh = subprocess.Popen(("ssh -q %s@%s -p %d interact" % (user, hostname, port)).split(), stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    if cmd in ["list", "update", "simple-list"]:
        msg = json.dumps({cmd: ""})
    else:
        msg = json.dumps({cmd: {"board": board}})

    ssh.stdin.write(msg)
    ssh.stdin.flush()
    answer = ssh.stdout.readline()
    ssh.terminate()
    return answer

def get_available_port():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('', 0))
    addr = sock.getsockname()
    local_port = addr[1]
    sock.close()
    return local_port

def get_hostkey():
    try:
        hkeys = paramiko.util.load_host_keys(os.path.expanduser("~/.ssh/known_hosts"))
    except IOError:
        hkeys = {}

    if hostname in hkeys:
        hkeytype = hkeys[hostname].keys()[0]
        return hkeys[hostname][hkeytype]

    print "WARNING: host key unavailable"
    return None

def pkey_connect(transport):
    for pkey in paramiko.Agent().get_keys():
        try:
            transport.auth_publickey(user, pkey)
            break
        except paramiko.SSHException:
            pass

argcomplete.autocomplete(parser)
args = parser.parse_args()

config_parser = ConfigParser()
config_parser.readfp(args.conf_file)
hostname = config_parser.get("lavabo-server", "hostname")
user = config_parser.get("lavabo-server", "user")
port = config_parser.getint("lavabo-server", "port")

if args.cmd not in ["upload", "list"] and args.BOARD is None:
    print "No board specified. Please add board in LAVABO_BOARD environment variable or as an argument to the command."
    sys.exit(1)

if args.cmd == "upload":
    hkey = get_hostkey()
    transport = paramiko.Transport((hostname, port))

    # We must set _preferred_keys before calling start_client() otherwise
    # there's a chance Paramiko won't negotiate the host key type we have
    # in our local known_keys... And there's no way to set it properly.
    if hkey is not None:
        transport._preferred_keys = [hkey.get_name()]

    transport.start_client()

    # Host key checks
    if hkey is not None:
        rkey = transport.get_remote_server_key()
        if rkey.get_name() != hkey.get_name() or rkey.asbytes() != hkey.asbytes():
            print "ERROR: remote host identification has changed!"
            sys.exit(1)

    # We don't use the connect() method directly because it can't handle
    # multiple keys from the SSH agent. It's also not possible to call it
    # multiple time as a workaround because this genius calls start_client()
    pkey_connect(transport)
    if not transport.is_authenticated():
        print "ERROR: Authentication failed."
        transport.close()
        sys.exit(1)

    sftp_client = transport.open_sftp_client()

    for upload in args.FILES:
        paths = upload.split(":")
        local_path = paths[0]
        remote_file = os.path.basename(paths[1]) if len(paths) == 2 else os.path.basename(local_path)
        sftp_client.put(local_path, remote_file)
    print "File(s) successfully sent to lavabo-server."

    sftp_client.close()
    transport.close()
else:
    answer = send_message(args.cmd, user, hostname, port, args.BOARD if hasattr(args, "BOARD") else None)
    try:
        answer = json.loads(answer)
    except ValueError as e:
        print e
        sys.exit(1)

    if args.cmd == "serial" and answer["status"] == "success":
        local_port = get_available_port()
        ssh = subprocess.Popen(("ssh -q -N -L %d:localhost:%d %s@%s -p %d" % (local_port, answer["content"]["port"], user, hostname, port)).split())
        serial = None
        for i in range(0,5):
            serial = pexpect.spawn("telnet localhost %d" % local_port)
            index = serial.expect(["Connected to localhost.", "Connection refused", "Connection closed"])
            if index == 0:
                break
            serial.close()
            if i < 4:
                print "Try %d to connect to serial failed. %d attempts remaining." % (i+1, 5-i-1)
                time.sleep(2)
        if serial.isalive():
            print "You have now access to the serial of %s." % args.BOARD
            serial.interact()
            serial.close()
        else:
            print "error: Could not establish serial connection."
            sys.exit(1)
        ssh.terminate()
    else:
        if answer["status"] == "error":
            print "%s: %s" % (answer["status"], answer["content"])
            sys.exit(1)
        content = answer["content"]
        if args.cmd == "list":
            for dev in content:
                del dev['pipeline']
                del dev['type']
            print tabulate(content, headers="keys")
        elif args.cmd == "status":
            print "%s is %s%s%s%s" % (content["hostname"], content["status"], (" job %d" % content["job"]) if content["job"] else "", (" by %s" % content["offline_by"]) if content["offline_by"] else "", (" since %s" % content["offline_since"]) if content["offline_since"] else "")
        elif args.cmd == "where":
            print "%s is located at %s port %s" % (args.BOARD, content["hostname"], content["port"])
